name: Test Maven Unleash E2E

on:
  workflow_dispatch:
        
  # ┌───────────── minute (0 - 59)
  # │ ┌───────────── hour (0 - 23)
  # │ │ ┌───────────── day of the month (1 - 31)
  # │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  # │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  # │ │ │ │ │
  # │ │ │ │ │
  # │ │ │ │ │
  # * * * * *
  schedule:
    - cron: '17 7 * * *' # run at 7:17 UTC every day

  # NEVER enable push - this will run infinite for this workflow since of self re-triggering!
  #push:
    #branches:
    #  - 'test/unleash_e2e'

concurrency:
  # Ensure this workflow is running single at a time
  #group: ${{ github.workflow }}-${{ github.ref }}
  #group: ${{ github.workflow }}
  group: ${{ vars.UNLEASH_E2E_TEST_REF }}
  cancel-in-progress: false

# Following variables from vars context are being expected:
#   vars.UNLEASH_E2E_TEST_REF
#   vars.UNLEASH_E2E_TEST_RESET_REF
#   vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL

jobs:
  job_Validate_VarsAndTestBranch:
    name: Validate Vars And Test Ref
    if: github.ref == vars.UNLEASH_E2E_TEST_REF
    runs-on: ubuntu-latest
    steps:
      - name: Validate Expected Variables
        run: |
          echo "vars.UNLEASH_E2E_TEST_REF:                \"${{ vars.UNLEASH_E2E_TEST_REF }}\""
          echo "vars.UNLEASH_E2E_TEST_RESET_REF:          \"${{ vars.UNLEASH_E2E_TEST_RESET_REF }}\""
          echo "vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL: \"${{ vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL }}\""
          if [[    -z "${{ vars.UNLEASH_E2E_TEST_REF }}" \
                || -z "${{ vars.UNLEASH_E2E_TEST_RESET_REF }}" \
                || -z "${{ vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL }}" \
             ]]; then
            echo "### ERROR: At least one of the before listed variables is not set or it is not visible for this repo!"
            exit 1
          fi
      - name: Validate Running on Test Branch
        run: |
          echo "Expected ref: ${{ vars.UNLEASH_E2E_TEST_REF }}"
          echo "Actual ref:   ${{ github.ref }}"
          if [[ ! "${{ github.ref }}" == "${{ vars.UNLEASH_E2E_TEST_REF }}" ]]; then
            echo "### ERROR: This Action must run on ref ${{ vars.UNLEASH_E2E_TEST_REF }} only!"
            exit 1
          fi


  job_Reset_TestBranch:
    name: Reset Test Branch
    needs: job_Validate_VarsAndTestBranch
    runs-on: ubuntu-latest
    # Elevate permission on repo content to write to allow git pushing
    permissions:
      contents: write
    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          # We need full history! - otherwise we end up in "missing commits" issue on unleash plugin
          fetch-depth: 0
          # Explicitly provide the ref path rather than using the original triggering SHA,
          # since that might have changed by particular jobs in multi job scenarios
          ref: ${{ github.ref }}
          token: ${{ secrets.SERVICE_USER_PAT }}
        
      - name: Force reset of test branch
        run: |
          git fetch --all
          RESET_COMMIT_SHA1=$(git log ${{ vars.UNLEASH_E2E_TEST_RESET_REF }} --max-count=1 --pretty=%H)
          git reset --hard ${RESET_COMMIT_SHA1}
          git push -f origin ${{ github.ref }}

      - name: Delete all tags "v*.*.*"
        run: |
          TAGS_TO_DELETE=$(git ls-remote --refs --tags origin -l "v*.*.*" | awk '{print $2}')
          if [[ -n "${TAGS_TO_DELETE}" ]]; then
            git push -d origin ${TAGS_TO_DELETE}
          else
            echo "No tags to delete."
          fi


  job_Test_Unleash_Version_Goals_And_Prints:
    name: Test Version Goals
    needs: job_Reset_TestBranch
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # use newer versions first
        javaVersion: [21, 17, 11, 8]
        mavenVersion: [3.9.8, 3.8.3, 3.6.3, 3.5.2, 3.3.9]
    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          # Explicitly provide the ref path rather than using the original triggering SHA,
          # since that might have changed by particular jobs in multi job scenarios
          ref: ${{ github.ref }}
          token: ${{ secrets.SERVICE_USER_PAT }}
        
      # Setup JAVA home with Maven settings
      - name: Setup JAVA home with Maven settings.xml
        id: setup-java-home
        uses: GHCICD/setup-java@vHEAD-GHCICD-552
        with:
          java-version: ${{ matrix.javaVersion }}
          distribution: zulu
 
      - name: Determine default installed Maven version
        id: default-maven
        run: |
          DEFAULT_MAVEN_VERSION="$(mvn -q -v)"
          echo "maven-version=${DEFAULT_MAVEN_VERSION}" >> $GITHUB_OUTPUT
          echo "Default installed Maven version: ${DEFAULT_MAVEN_VERSION}"

      - name: Update Maven version if required
        uses: mavenplugins/actions-setup-maven@vHEAD
        if: matrix.mavenVersion != steps.default-maven.outputs.maven-version
        with:
          maven-version: '${{ matrix.mavenVersion }}'

      - name: Test unleash version goals
        run: |

          # _calcNextSnapshotVersionExpected
          # $1 current release version
          # $2 (optional) index of version to increment
          _calcNextSnapshotVersionExpected() {
            _EXPECTED_RELEASE_VERSION=${1}
            _INDEX_DIGIT_TO_INCREMENT=${2}
            # Validate expected release version
            if [[ ! "${_EXPECTED_RELEASE_VERSION}" =~ ^[0-9]+(\.[0-9]+){0,3}$ ]]; then
              echo "### ERROR: _EXPECTED_RELEASE_VERSION=${_EXPECTED_RELEASE_VERSION} is not of format 'major[.minor[.incremental[.build]]]'"
              exit 1
            fi
            # Split release version parts into ARRAY
            _IFS=$IFS && IFS='.' && read -r -a ARRAY <<< "${_EXPECTED_RELEASE_VERSION}" && IFS=$_IFS
            j=$((${#ARRAY[@]} - 1))
            if [[ -z "${_INDEX_DIGIT_TO_INCREMENT}" ]]; then
              ARRAY[$j]=$((ARRAY[$j] + 1))
            else
              ARRAY[$_INDEX_DIGIT_TO_INCREMENT]=$((ARRAY[$_INDEX_DIGIT_TO_INCREMENT] + 1))
            fi
            _EXPECTED_NEXT_SNAPSHOT_VERSION=""
            for i in ${!ARRAY[@]}; do
              _EXPECTED_NEXT_SNAPSHOT_VERSION="${_EXPECTED_NEXT_SNAPSHOT_VERSION}${ARRAY[$i]}"
              [[ $i -lt $j ]] && _EXPECTED_NEXT_SNAPSHOT_VERSION="${_EXPECTED_NEXT_SNAPSHOT_VERSION}."
            done
            _EXPECTED_NEXT_SNAPSHOT_VERSION="${_EXPECTED_NEXT_SNAPSHOT_VERSION}-SNAPSHOT"
            echo "${_EXPECTED_NEXT_SNAPSHOT_VERSION}"
          }
 
          MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout -Dversion.maven-help-plugin=3.3.0 help:evaluate)
          EXPECTED_RELEASE_VERSION="${MAVEN_PROJECT_VERSION%*-SNAPSHOT}"
          echo "Expected release version derived from project POM: ${EXPECTED_RELEASE_VERSION}"
 
          # Validate release version calculated
          UNLEASH_CALCULATED_RELEASE_VERSION=$(mvn -q unleash:releaseVersion -DforceStdout)
          echo "Unleash calculated release version: ${UNLEASH_CALCULATED_RELEASE_VERSION}"
          if [[ "${UNLEASH_CALCULATED_RELEASE_VERSION}" != "${EXPECTED_RELEASE_VERSION}" ]]; then
            echo "### ERROR: UNLEASH_CALCULATED_RELEASE_VERSION is not equal to EXPECTED_RELEASE_VERSION"
            exit 1
          fi
 
          # Validate next SNAPSHOT calculated with DEFAULT version upgrade strategy
          echo "Test next SNAPSHOT version with DEFAULT version upgrade strategy:"
          EXPECTED_NEXT_SNAPSHOT_VERSION=$(_calcNextSnapshotVersionExpected "${EXPECTED_RELEASE_VERSION}")
          echo "  Expected next DEFAULT snapshot version: ${EXPECTED_NEXT_SNAPSHOT_VERSION}"
          UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION=$(mvn -q unleash:nextSnapshotVersion -DforceStdout)
          echo "  Unleash calculated next snapshot version: ${UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION}"
          if [[ "${UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION}" != "${EXPECTED_NEXT_SNAPSHOT_VERSION}" ]]; then
            echo "### ERROR: UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION is not equal to EXPECTED_NEXT_SNAPSHOT_VERSION"
            exit 1
          fi
 
          # Validate next SNAPSHOT calculated with MAJOR version upgrade strategy
          echo "Test next SNAPSHOT version with MAJOR version upgrade strategy:"
          EXPECTED_NEXT_SNAPSHOT_VERSION=$(_calcNextSnapshotVersionExpected "${EXPECTED_RELEASE_VERSION}" 0)
          echo "  Expected next MAJOR snapshot version: ${EXPECTED_NEXT_SNAPSHOT_VERSION}"
          UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION=$(mvn -q unleash:nextSnapshotVersion -Dunleash.versionUpgradeStrategy=MAJOR -DforceStdout)
          echo "  Unleash calculated next MAJOR snapshot version: ${UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION}"
          if [[ "${UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION}" != "${EXPECTED_NEXT_SNAPSHOT_VERSION}" ]]; then
            echo "### ERROR: UNLEASH_CALCULATED_NEXT_SNAPSHOT_VERSION is not equal to EXPECTED_NEXT_SNAPSHOT_VERSION"
            exit 1
          fi

      - name: Test unleash print only options
        run: |

          # Print workflow
          echo "Test print workflow only:"
          mvn unleash:perform -DprintWorkflow

          # Print available steps
          echo "Test print available steps only:"
          mvn unleash:perform -DprintSteps


  job_Test_Unleash_01:
    # Test 01 logScmProviderTagAndMsgPrefix.txt
    name: T01
    needs: job_Test_Unleash_Version_Goals_And_Prints
    strategy:
      max-parallel: 1
      matrix:
        # use newer versions first
        javaVersion: [21, 17, 11, 8]
        mavenVersion: [3.9.8, 3.8.3, 3.6.3, 3.5.2, 3.3.9]
    # Elevate permission on repo content to write to allow git pushing
    permissions:
      contents: write
    secrets: inherit
    uses: mavenplugins/reusable-gh-actions/.github/workflows/__maven_unleash.yml@master
    with:
      runner: ubuntu-latest
      releaseToMavenCentral: false
      enforceUnleashReleaseWorkflow: false
      unleashWorkflowURL: ${{vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL }}/logScmProviderTagAndMsgPrefix.txt
      mavenVersion: ${{ matrix.mavenVersion }}
      mavenOpts: -Dversion.java=${{ matrix.javaVersion }}
      unleashOptsToAppend: -Dunleash.isDeployDryRun=true
      javaHomeVersion: ${{ matrix.javaVersion }}


  job_Test_Unleash_02:
    # Test 02 RollbackAfterTagScm
    name: T02
    needs: job_Test_Unleash_01
    strategy:
      max-parallel: 1
      matrix:
        # use newer versions first
        javaVersion: [21, 17, 11, 8]
        mavenVersion: [3.9.8, 3.8.3, 3.6.3, 3.5.2, 3.3.9]
    # Elevate permission on repo content to write to allow git pushing
    permissions:
      contents: write
    secrets: inherit
    uses: mavenplugins/reusable-gh-actions/.github/workflows/__maven_unleash.yml@master
    with:
      runner: ubuntu-latest
      releaseToMavenCentral: false
      enforceUnleashReleaseWorkflow: false
      unleashWorkflowURL: ${{vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL }}/performReleaseRollbackAfterTagScm.txt
      mavenVersion: ${{ matrix.mavenVersion }}
      mavenOpts: -Dversion.java=${{ matrix.javaVersion }}
      unleashOptsToAppend: -Dunleash.isDeployDryRun=true
      javaHomeVersion: ${{ matrix.javaVersion }}


  job_Test_Unleash_03:
    # Test 03 NoDeployRollbackAfterInstallArtifacts
    name: T03
    needs: job_Test_Unleash_02
    strategy:
      max-parallel: 1
      matrix:
        # use newer versions first
        javaVersion: [21, 17, 11, 8]
        mavenVersion: [3.9.8, 3.8.3, 3.6.3, 3.5.2, 3.3.9]
    # Elevate permission on repo content to write to allow git pushing
    permissions:
      contents: write
    secrets: inherit
    uses: mavenplugins/reusable-gh-actions/.github/workflows/__maven_unleash.yml@master
    with:
      runner: ubuntu-latest
      releaseToMavenCentral: false
      enforceUnleashReleaseWorkflow: false
      unleashWorkflowURL: ${{vars.UNLEASH_E2E_TEST_WORKFLOWS_BASE_URL }}/performReleaseRollbackAfterDeployArtifacts.txt
      mavenVersion: ${{ matrix.mavenVersion }}
      mavenOpts: '-X -Dversion.java=${{ matrix.javaVersion }}'
      #mavenOpts: -Dversion.java=${{ matrix.javaVersion }}
      unleashOptsToAppend: -Dunleash.isDeployDryRun=true
      javaHomeVersion: ${{ matrix.javaVersion }}
